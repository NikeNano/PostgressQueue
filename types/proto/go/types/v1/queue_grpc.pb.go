// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueueServiceClient is the client API for QueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueServiceClient interface {
	GetValues(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error)
	PutValue(ctx context.Context, in *Value, opts ...grpc.CallOption) (*Key, error)
	GetValuesTx(ctx context.Context, opts ...grpc.CallOption) (QueueService_GetValuesTxClient, error)
}

type queueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueServiceClient(cc grpc.ClientConnInterface) QueueServiceClient {
	return &queueServiceClient{cc}
}

func (c *queueServiceClient) GetValues(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/queue.v1.QueueService/GetValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) PutValue(ctx context.Context, in *Value, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/queue.v1.QueueService/PutValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) GetValuesTx(ctx context.Context, opts ...grpc.CallOption) (QueueService_GetValuesTxClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueueService_ServiceDesc.Streams[0], "/queue.v1.QueueService/GetValuesTx", opts...)
	if err != nil {
		return nil, err
	}
	x := &queueServiceGetValuesTxClient{stream}
	return x, nil
}

type QueueService_GetValuesTxClient interface {
	Send(*Key) error
	Recv() (*Value, error)
	grpc.ClientStream
}

type queueServiceGetValuesTxClient struct {
	grpc.ClientStream
}

func (x *queueServiceGetValuesTxClient) Send(m *Key) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queueServiceGetValuesTxClient) Recv() (*Value, error) {
	m := new(Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueueServiceServer is the server API for QueueService service.
// All implementations should embed UnimplementedQueueServiceServer
// for forward compatibility
type QueueServiceServer interface {
	GetValues(context.Context, *Key) (*Value, error)
	PutValue(context.Context, *Value) (*Key, error)
	GetValuesTx(QueueService_GetValuesTxServer) error
}

// UnimplementedQueueServiceServer should be embedded to have forward compatible implementations.
type UnimplementedQueueServiceServer struct {
}

func (UnimplementedQueueServiceServer) GetValues(context.Context, *Key) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValues not implemented")
}
func (UnimplementedQueueServiceServer) PutValue(context.Context, *Value) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutValue not implemented")
}
func (UnimplementedQueueServiceServer) GetValuesTx(QueueService_GetValuesTxServer) error {
	return status.Errorf(codes.Unimplemented, "method GetValuesTx not implemented")
}

// UnsafeQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServiceServer will
// result in compilation errors.
type UnsafeQueueServiceServer interface {
	mustEmbedUnimplementedQueueServiceServer()
}

func RegisterQueueServiceServer(s grpc.ServiceRegistrar, srv QueueServiceServer) {
	s.RegisterService(&QueueService_ServiceDesc, srv)
}

func _QueueService_GetValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).GetValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue.v1.QueueService/GetValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).GetValues(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_PutValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).PutValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue.v1.QueueService/PutValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).PutValue(ctx, req.(*Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_GetValuesTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueueServiceServer).GetValuesTx(&queueServiceGetValuesTxServer{stream})
}

type QueueService_GetValuesTxServer interface {
	Send(*Value) error
	Recv() (*Key, error)
	grpc.ServerStream
}

type queueServiceGetValuesTxServer struct {
	grpc.ServerStream
}

func (x *queueServiceGetValuesTxServer) Send(m *Value) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queueServiceGetValuesTxServer) Recv() (*Key, error) {
	m := new(Key)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueueService_ServiceDesc is the grpc.ServiceDesc for QueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queue.v1.QueueService",
	HandlerType: (*QueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValues",
			Handler:    _QueueService_GetValues_Handler,
		},
		{
			MethodName: "PutValue",
			Handler:    _QueueService_PutValue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetValuesTx",
			Handler:       _QueueService_GetValuesTx_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "types/v1/queue.proto",
}
